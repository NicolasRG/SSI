{"version":3,"sources":["components/DialogBox.js","components/CommandAction.js","components/Gridview.js","components/InShip.js","components/DynamicButton.js","components/ButtonCSS.js","components/NameInput.js","components/OpenRoomView.js","components/Rooms.js","components/WaitingRoom.js","components/Container.js","components/App.js","serviceWorker.js","index.js"],"names":["DialogBox","props","state","personalMsg","shipMsg","this","socket","on","d","setState","msg","id","Component","CommmandAction","className","onClick","name","Gridview","list","player","card","commands","map","i","e","emit","key","InShip","DynamicButton","style","ButtonId","class","content","ButtonCSS","baseStyle","nextProps","showButton","endStyle","nameOnKeyFrame","duration","nameOffKeyFrame","children","NameInput","preventDefault","keyCode","console","log","target","value","show","length","onSubmit","onSubmitName","type","autoComplete","onChange","onInput","OpenRoomView","Room","mapRooms","bind","selected","roomsHeight","roomsWidth","loaded","items","calcRoomDims","roomName","window","addEventListener","removeEventListener","roomDiv","document","getElementById","height","Math","floor","clientHeight","width","clientWidth","roomlist","openRoomsStyle","Object","entries","constructor","color","onClickRoom","ship","onJoin","onCreate","WaitingRoom","listsize","waitinglist","isCreator","startClick","leaveClick","Container","cmdHolder","stage","navMessage","gameStage","itter","playerState","activeScreen","openSocket","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yhBAgDeA,G,oEAzCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,YAAa,GACbC,QAAS,IAJC,E,gEAQE,IAAD,OACfC,KAAKJ,MAAMK,OAAOC,GAAG,eAAe,SAACC,GACjC,EAAKC,SAAS,CACVN,YAAcK,EAAEE,SAIvBL,KAAKJ,MAAMK,OAAOC,GAAG,WAAW,SAACC,GAC9B,EAAKC,SAAS,CACVL,QAAUI,EAAEE,SAInBL,KAAKJ,MAAMK,OAAOC,GAAG,aAAY,SAACC,GAC/B,EAAKC,SAAS,CACNL,QAASI,EAAEE,W,+BAOvB,OAAO,yBAAKC,GAAI,aACJ,6BACKN,KAAKH,MAAME,SAEhB,6BACKC,KAAKH,MAAMC,kB,GArCZS,cCUTC,G,mLATP,OACA,yBAAKC,UAAU,gBAAgBC,QAAUV,KAAKJ,MAAMc,SAChD,yBAAKD,UAAY,WACZT,KAAKJ,MAAMe,W,GANCJ,cCkBdK,E,uKAfH,IAAD,OACHC,EAAOb,KAAKJ,MAAMkB,OAAOC,KAAKC,SAASC,KAAI,SAACd,EAAGe,GAQjD,OAAO,kBAAC,EAAD,CAAeP,KAAMR,EAAEQ,KAAMD,QAPtB,SAAAS,GACZ,EAAKvB,MAAMK,OAAOmB,KAAK,UAAW,CAChCN,OAAQ,EAAKlB,MAAMkB,OACnBR,GAAIH,EAAEG,GACNK,KAAMR,EAAEQ,QAGwCU,IAAKlB,EAAEG,QAE7D,OAAO,yBAAKA,GAAG,YAAYO,O,GAZRN,aCuBRe,E,kDArBX,WAAY1B,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,uDAOPsB,GACPnB,KAAKJ,MAAMK,OAAOmB,KAAK,a,+BAIvB,OAAO,yBAAKd,GAAK,UACT,kBAAC,EAAD,CAAWL,OAAQD,KAAKJ,MAAMK,SAC9B,kBAAC,EAAD,CAAUA,OAAQD,KAAKJ,MAAMK,OAAQa,OAAQd,KAAKJ,MAAMkB,c,GAfnDP,aCaNgB,G,yLAZF,IAAD,OACJ,OAAO,yBACPC,MAASxB,KAAKJ,MAAM4B,MACpBlB,GAAMN,KAAKJ,MAAM6B,SACjBhB,UAAaT,KAAKJ,MAAM8B,MACxBhB,QAAW,SAACS,GAAK,EAAKvB,MAAMc,QAAQS,KAEnC,0BAAMb,GAAK,qBAAX,IAAiCN,KAAKJ,MAAM+B,QAA5C,U,GAXmBpB,cCyCbqB,E,kDAtCX,WAAYhC,GAAO,IAAD,8BACd,cAAMA,IAED4B,MAAQ5B,EAAMiC,UAHL,E,sEAMQC,GACnBA,EAAUC,YACT/B,KAAKwB,MAAQxB,KAAKJ,MAAMoC,SACxBhC,KAAKwB,MAAQ,CACT,iBAAkB,GAAGM,EAAUG,eAC/B,qBAAuB,MACvB,sBAAuBH,EAAUI,SACjC,OAAU,YAGdlC,KAAKwB,MAAQ,CACT,iBAAmB,GAAGM,EAAUK,gBAChC,sBAAwB,WACxB,qBAAuBL,EAAUI,SACjC,OAAU,Y,+BAOnB,OAAO,yBAAK5B,GAAI,YACPkB,MAASxB,KAAKwB,OAGNxB,KAAKJ,MAAMwC,c,GAhCX7B,aCiFT8B,E,kDA7EX,WAAYzC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTc,KAAK,GACLoB,YAAa,GAJH,E,yDAQLZ,GACTA,EAAEmB,iBACEtC,KAAKH,MAAMkC,YAGf/B,KAAKJ,MAAMK,OAAOmB,KAAK,aAAc,CAACT,KAAMX,KAAKH,MAAMc,S,8BAGnDQ,GACc,KAAdA,EAAEoB,SACJpB,EAAEmB,iBAGJE,QAAQC,WAAWtB,EAAEuB,OAAOC,OAC5B,IAAIC,GAAO,EAEkB,IAA1BzB,EAAEuB,OAAOC,MAAME,SACdD,GAAO,GACX5C,KAAKI,SAAS,CACVO,KAAMQ,EAAEuB,OAAOC,MACfZ,WAAaa,M,+BAKZ,IAAD,OACJ,OAAO,yBAAKtC,GAAM,aACV,yBAAKA,GAAM,aAAX,qBAGA,0BAAMwC,SAAU,SAAC3B,GAAD,OAAK,EAAK4B,aAAa5B,IACvCb,GAAM,YAEF,2BACI0C,KAAK,OACLC,aAAc,MACdN,MAAS3C,KAAKH,MAAMc,KACpBuC,SAAY,SAAC/B,GAAD,OAAK,EAAKgC,QAAQhC,IAE9Bb,GAAI,YAIR,kBAAC,EAAD,CAAWyB,WAAc/B,KAAKH,MAAMkC,WAChCF,UAAa,CACT,QAAU,IACV,iBAAkB,QAEtBI,eAAkB,OAClBE,gBAAmB,SACnBD,SAAY,OAEZ,kBAAC,EAAD,CACIV,MAAQ,CACR,MAAQ,OACR,OAAW,QACX,WAAe,KAEfE,MAAQ,iBACRC,QAAU,MACVjB,QAAW,SAACS,GAAD,OAAK,EAAK4B,aAAa5B,a,GAtEtCZ,aCcT6C,E,kDAdX,WAAYxD,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,qDAOd,OAAO,yBAAKS,GAAM,gBACd,yBAAKG,UAAU,mBACR,kBAAC,EAAD,CAAWR,OAAQD,KAAKJ,MAAMK,e,GAXtBM,aCoHZ8C,G,8DAnHX,WAAYzD,GAAO,IAAD,8BACd,cAAMA,IACD0D,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAK1D,MAAQ,CACT2D,SAAU,KACVC,YAAc,KACdC,WAAa,KACbC,QAAS,GAEb,EAAKC,MAAQ,KACb,EAAKC,aAAe,EAAKA,aAAaN,KAAlB,gBAVN,E,uDAgBdvD,KAAKJ,MAAMK,OAAOmB,KAAK,aAAc,CAACT,KAAMX,KAAKJ,MAAMkB,OAAOH,KAC1DmD,SAAS,GAAD,OAAK9D,KAAKJ,MAAMkB,OAAOH,KAAvB,e,6BAITQ,EAAEhB,EAAEe,GACPlB,KAAKJ,MAAMK,OAAOmB,KAAK,WAAYjB,K,kCAI3BgB,EAAER,EAAML,GAChBN,KAAKI,SAAS,CACVoD,SAAW7C,IAEf6B,QAAQC,IAAIzC,KAAKH,MAAM2D,Y,0CAIvBxD,KAAK6D,eACLE,OAAOC,iBAAiB,SAAUhE,KAAK6D,gB,6CAIvCE,OAAOE,oBAAoB,SAAUjE,KAAK6D,gB,qCAI1C,IAAMK,EAAUC,SAASC,eAAe,SAClCC,EAAUC,KAAKC,MAA2B,IAArBL,EAAQM,cAAoB,GACjDC,EAAQP,EAAQQ,YAAc,GACpC1E,KAAKI,SAAS,CACNqD,YAAeY,EACfX,WAAce,EACdd,QAAS,M,iCAIV,IAAD,OACN,IAAyB,IAAtB3D,KAAKH,MAAM8D,OACX,OAAO,0CAEVnB,QAAQC,IAAIzC,KAAKJ,MAAM+E,UAGvB,IAAMC,EAAgB,CAClBH,MAAOzE,KAAKH,MAAM6D,WAAW,KAC7BW,OAAQrE,KAAKH,MAAM4D,YAAY,MAGnC,OAAkD,IAA/CoB,OAAOC,QAAQ9E,KAAKJ,MAAM+E,UAAU9B,QAAgBgC,OAAOE,YACnD,yBAAKtE,UAAa,YAAae,MAASoD,GAAxC,YAGX5E,KAAK4D,MAAS5D,KAAKJ,MAAM+E,SAAS1D,KAAI,SAACd,EAAEe,GACrC,IAAI8D,GAAQ,EAIZ,OAHG,EAAKnF,MAAM2D,WAAarD,IACvB6E,GAAQ,GAEL,yBAAK1E,GAAK,OAAOY,EAAGG,IAAO,OAAOH,EACzCT,UAAauE,EAAO,kBAAmB,qBACvCtE,QAAS,SAACS,GAAD,OAAK,EAAK8D,YAAY9D,EAAEhB,EAAEe,KAClCf,EAAE+E,KACH,kBAAC,EAAD,CAAevD,QAAQ,OACnBjB,QAAW,SAACS,GAAK,EAAKgE,OAAOhE,EAAEhB,EAAEe,IACjCQ,MAAU,kCAKX,yBAAKjB,UAAa,YAAae,MAAOoD,GACxC5E,KAAK4D,U,+BAGL,IAAD,OAEJ,OAAO,yBAAKtD,GAAI,SACR,yBAAKA,GAAK,qBACN,yBAAKA,GAAI,aAAT,IAAuBN,KAAKJ,MAAMkB,OAAOH,MACxC,yBAAKL,GAAK,eAAV,iBAEHN,KAAKsD,WAEH,kBAAC,EAAD,CACI3B,QAAW,SACXF,SAAW,eACXf,QAAU,SAACS,GAAK,EAAKiE,SAASjE,IAC9BO,MAAQ,iBACRF,MAAS,U,GAxGdjB,cCkDJ8E,G,wDAlDX,WAAYzF,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPyF,SAAW,GAHD,E,uDAQPnE,GACPnB,KAAKJ,MAAMK,OAAOmB,KAAK,gB,iCAGhBD,GACPnB,KAAKJ,MAAMK,OAAOmB,KAAK,a,iCAGhBD,GACPqB,QAAQC,IAAI,kBACZzC,KAAKJ,MAAMK,OAAOmB,KAAK,sB,+BAIlB,IAAD,OACJ,OAAO,yBAAKd,GAAG,eACH,yBAAKA,GAAK,oBAAV,+BAGA,yBAAKG,UAAW,6BACXT,KAAKJ,MAAM2F,YAAYtE,KAAI,SAACd,EAAGe,GAC5B,OAAO,yBAAKT,UAAa,0BAAlB,IAA8CN,EAAI,UAGjE,yBAAKM,UAAa,4BACXT,KAAKJ,MAAMkB,OAAO0E,WACrB,kBAAC,EAAD,CACA7D,QAAU,aACVjB,QAAW,SAACS,GAAD,OAAK,EAAKsE,WAAWtE,IAChCO,MAAQ,mBAGR,kBAAC,EAAD,CACIC,QAAU,aACVjB,QAAW,SAACS,GAAD,OAAK,EAAKuE,WAAWvE,IAChCO,MAAQ,yB,GA5CVnB,cCyJXoF,E,kDAlJb,WAAY/F,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXiB,OAAQ,KACRhB,YAAa,GACbC,QAAS,GACT6F,UAAW,KACXC,MAAO,aACPlB,SAAU,GACVY,YAAa,GACbO,WAAa,YAGf,EAAKF,UAAY,KACjB,EAAKG,UAAY,EAAKA,UAAUxC,KAAf,gBAdA,E,gEAkBE,IAAD,OAClBvD,KAAKJ,MAAMK,OAAOC,GAAG,gBAAgB,SAAAiB,GACnCqB,QAAQC,IAAItB,EAAE6E,OACd,EAAK5F,SAAS,CACZU,OAAQK,EAAEL,OACV+E,MAAO,YACPlB,SAAUxD,EAAE6E,MACZF,WAAa,kBAIjB9F,KAAKJ,MAAMK,OAAOC,GAAG,gBAAgB,SAACiB,GACpCqB,QAAQC,IAAItB,GACZ,EAAKf,SAAS,CACZuE,SAAUxD,EAAE6E,WAQhBhG,KAAKJ,MAAMK,OAAOC,GAAG,YAAW,SAACC,GAC/B,EAAKC,SAAS,CACZuE,SAAUxE,EAAE6F,WAIhBhG,KAAKJ,MAAMK,OAAOC,GAAG,cAAc,SAAAiB,GACjC,EAAKf,SAAS,CACZyF,MAAO,eACP/E,OAAQK,EAAEL,OACVgF,WAAa,oBAIjB9F,KAAKJ,MAAMK,OAAOC,GAAG,cAAc,SAAAC,GACjC,EAAKC,SAAS,CACZU,OAAQX,EAAE8F,YACVJ,MAAO,YACPC,WAAa,YAGftD,QAAQC,IAAItC,EAAE8F,gBAGhBjG,KAAKJ,MAAMK,OAAOC,GAAG,aAAa,SAAAC,GAChC,EAAKC,SAAS,CACZL,QAASI,EAAEE,SAOfL,KAAKJ,MAAMK,OAAOC,GAAG,iBAAgB,SAACC,GACpCqC,QAAQC,IAAItC,GACZ,EAAKC,SAAS,CACZmF,YAAcpF,EAAEU,UASpBb,KAAKJ,MAAMK,OAAOC,GAAG,iBAAiB,SAAAC,GACpC,EAAKC,SAAS,CACZwF,UAAWzF,IAGb,EAAKyF,UAAYzF,EACjBqC,QAAQC,IAAItC,Q,gCAINgB,GACRnB,KAAKJ,MAAMK,OAAOmB,KAAK,gB,iCAGdD,GACTnB,KAAKJ,MAAMK,OAAOmB,KAAK,a,0CAKLD,EAAGb,GACrBkC,QAAQC,IAAIzC,KAAKH,MAAM+F,WACK,MAAxB5F,KAAKH,MAAM+F,WACXtF,IAAON,KAAKH,MAAM+F,UAAUtF,IAC9BN,KAAKJ,MAAMK,OAAOmB,KAAK,UAAW,CAAEd,GAAIN,KAAKM,GAAIK,KAAMX,KAAKW,S,kCAK9D,MAAyB,eAArBX,KAAKH,MAAMgG,MACN,kBAAC,EAAD,CAAc5F,OAAQD,KAAKJ,MAAMK,SACV,cAArBD,KAAKH,MAAMgG,MAElB,kBAAC,EAAD,CACE5F,OAAQD,KAAKJ,MAAMK,OACnBa,OAAQd,KAAKH,MAAMiB,OACnB6D,SAAU3E,KAAKH,MAAM8E,WAGK,iBAArB3E,KAAKH,MAAMgG,MAElB,kBAAC,EAAD,CAAa5F,OAAQD,KAAKJ,MAAMK,OAAQa,OAAQd,KAAKH,MAAMiB,OAASyE,YAAcvF,KAAKH,MAAM0F,cAEjE,cAArBvF,KAAKH,MAAMgG,MACb,kBAAC,EAAD,CAAQ5F,OAAQD,KAAKJ,MAAMK,OAAQa,OAAQd,KAAKH,MAAMiB,cADxD,I,+BAMP,IAAMoF,EAAelG,KAAK+F,YAC1B,OAAO,yBAAKzF,GAAG,aACf,4BAAQG,UAAU,cAEVT,KAAKH,MAAMiG,YAGlBI,O,GA9ImB3F,aCHlBN,EAASkG,IAAW,kBAwBXC,E,kDAtBb,WAAYxG,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXI,OAAOA,GAHO,E,gEAQhBA,EAAOmB,KAAK,oB,+BAKZ,OAEI,yBAAKX,UAAU,OACZ,kBAAC,EAAD,CAAWR,OAAUD,KAAKH,MAAMI,c,GAjBzBM,aCIE8F,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD2H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b40cafa6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../stylesheets/DialogBox.css';\r\n/**\r\n * need to add support for rooms and need to lookup if namespaces are useful here\r\n */\r\nclass DialogBox extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            personalMsg: \"\",\r\n            shipMsg: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.socket.on('personalMsg', (d)=>{\r\n            this.setState({\r\n                personalMsg : d.msg,\r\n            });\r\n         });\r\n \r\n         this.props.socket.on('shipMsg', (d)=>{\r\n            this.setState({\r\n                shipMsg : d.msg,\r\n            });\r\n         });\r\n\r\n         this.props.socket.on('onShipCmd',(d)=>{\r\n            this.setState({\r\n                    shipMsg: d.msg,\r\n            })\r\n        });\r\n         \r\n    }\r\n\r\n    render(){\r\n        return <div id= \"DialogBox\">\r\n                    <div>\r\n                        {this.state.shipMsg}    \r\n                    </div>\r\n                    <div>\r\n                        {this.state.personalMsg}\r\n                    </div>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default DialogBox;","import React, {Component} from 'react';\r\nimport '../stylesheets/CommandAction.css';\r\n\r\nclass CommmandAction extends Component{\r\n   \r\n    render(){\r\n        return (\r\n        <div className=\"CommandAction\" onClick= {this.props.onClick}>\r\n            <div className = \"content\">\r\n                {this.props.name}\r\n            </div>    \r\n        </div>)\r\n   }\r\n}\r\n\r\nexport default CommmandAction;\r\n","import React, { Component } from \"react\";\r\nimport \"../stylesheets/Gridview.css\";\r\n//import child components\r\nimport CommandAction from \"./CommandAction.js\";\r\n\r\nclass Gridview extends Component {\r\n  render() {\r\n    let list = this.props.player.card.commands.map((d, i) => {\r\n      const click = e => {\r\n        this.props.socket.emit(\"Command\", {\r\n          player: this.props.player,\r\n          id: d.id,\r\n          name: d.name\r\n        }); //can cause a ddos attack deal later on backend server\r\n      };\r\n      return <CommandAction name={d.name} onClick={click} key={d.id} />;\r\n    });\r\n    return <div id=\"Gridview\">{list}</div>;\r\n  }\r\n}\r\n\r\nexport default Gridview;\r\n","import React, {Component} from 'react';\r\nimport '../stylesheets/InShip.css';\r\n\r\nimport DialogBox from './DialogBox.js';\r\nimport Gridview from './Gridview.js';\r\n\r\nclass InShip extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    onDevClick(e){\r\n        this.props.socket.emit(\"dev_gen\");\r\n    }\r\n\r\n    render(){\r\n        return <div id = \"InShip\">\r\n                <DialogBox socket={this.props.socket}/>\r\n                <Gridview socket={this.props.socket} player={this.props.player}/>\r\n                {/*<button onClick={(e)=>this.onDevClick(e)}> Gen a Command</button>*/}\r\n            </div>\r\n    }\r\n\r\n}\r\n\r\nexport default InShip;","import React, { Component } from 'react';\r\nimport \"../stylesheets/DynamicButton.css\"\r\n\r\nclass DynamicButton extends Component{\r\n\r\n    \r\n\r\n    render(){\r\n        return <div\r\n        style = {this.props.style}\r\n        id = {this.props.ButtonId}\r\n        className = {this.props.class}\r\n        onClick = {(e)=>{this.props.onClick(e)}}\r\n        >\r\n         <span id = \"DynamicButtonText\"> {this.props.content} </span>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default DynamicButton;","import React, {Component} from \"react\";\r\n/**\r\n * Binary CSS transition\r\n * Made this cause I wasnt content with Reacts Transistion module\r\n */\r\nclass ButtonCSS extends Component{\r\n    constructor(props){\r\n        super(props);\r\n       // this.currentStyle = this.currentStyle.bind(this);\r\n        this.style = props.baseStyle;\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.showButton){\r\n            this.style = this.props.endStyle \r\n            this.style = {\r\n                \"animation-name\": \"\"+nextProps.nameOnKeyFrame,\r\n                \"animation-duration\" : \".5s\",\r\n                \"animation-fill-mode\": nextProps.duration,\r\n                \"cursor\": \"pointer\", \r\n            }\r\n        }else{\r\n            this.style = {\r\n                \"animation-name\" : \"\"+nextProps.nameOffKeyFrame,\r\n                \"animation-fill-mode\" : \"forwards\",\r\n                \"animation-duration\" : nextProps.duration,\r\n                \"cursor\": \"cursor\",\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n       return <div id= \"ButtonCSS\"\r\n                style = {this.style}\r\n                >\r\n                    {\r\n                        this.props.children\r\n                    }\r\n            </div>\r\n    }\r\n\r\n}\r\n\r\nexport default ButtonCSS;","import React, {Component} from \"react\";\r\nimport '../stylesheets/NameInput.css';\r\nimport DynamicButton from  './DynamicButton.js';\r\n//import { CSSTransition } from 'react-transition-group';\r\n\r\nimport ButtonCSS from  './ButtonCSS.js';\r\n\r\nclass NameInput extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name:\"\",\r\n            showButton : false\r\n        }\r\n    }\r\n\r\n    onSubmitName(e){\r\n        e.preventDefault();\r\n        if(!this.state.showButton){\r\n            return;\r\n        }\r\n        this.props.socket.emit(\"nameSubmit\", {name: this.state.name});\r\n    }\r\n\r\n    onInput(e){\r\n        if (e.keyCode === 13) {\r\n          e.preventDefault();\r\n          //this.onSubmitName();\r\n        }\r\n        console.log(typeof e.target.value)\r\n        let show = true;\r\n\r\n        if(e.target.value.length === 0){\r\n            show = false;}\r\n        this.setState({\r\n            name: e.target.value,\r\n            showButton : show});\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        return <div id = {\"NameInput\"}>\r\n                <div id = {\"NameTitle\"}>\r\n                    What Is Your Name\r\n                </div>\r\n                <form onSubmit={(e)=>this.onSubmitName(e)}\r\n                id = {\"NameForm\"}\r\n                >\r\n                    <input \r\n                        type=\"text\" \r\n                        autoComplete= \"off\" \r\n                        value = {this.state.name}\r\n                        onChange = {(e)=>this.onInput(e)}\r\n                        //onSubmit = {(e)=>this.onSubmitName(e)}\r\n                        id= \"nameBox\"\r\n                        >\r\n\r\n                    </input>\r\n                    <ButtonCSS showButton = {this.state.showButton}\r\n                        baseStyle = {{\r\n                            \"opacity\":\"0\",\r\n                            \"pointer-events\": \"none\",\r\n                        }}\r\n                        nameOnKeyFrame = {\"show\"}\r\n                        nameOffKeyFrame = {\"unShow\"}\r\n                        duration = {\".5s\"}\r\n                    >     \r\n                        <DynamicButton\r\n                            style= {{       \r\n                            \"width\":\"100%\",\r\n                            \"height\" : \"7vmin\",\r\n                            \"lineHeight\" : \"2\",\r\n                            }}\r\n                            class = \"default_button\"\r\n                            content = \"GO!\"\r\n                            onClick = {(e)=>this.onSubmitName(e)}\r\n                        >\r\n                        </DynamicButton>   \r\n                    </ButtonCSS>    \r\n                </form>\r\n\r\n            </div>\r\n    }\r\n}\r\nexport default NameInput;","import React, {Component} from \"react\";\r\nimport '../stylesheets/OpenRoomView.css';\r\n\r\nimport NameInput from './NameInput.js';\r\n\r\nclass OpenRoomView extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return <div id = {\"OpenRoomView\"}>\r\n            <div className=\"CenteredContent\">\r\n                   <NameInput socket={this.props.socket}/>\r\n             </div>      \r\n            </div>\r\n    }\r\n}\r\nexport default OpenRoomView;","import React, { Component } from 'react';\r\nimport '../stylesheets/Rooms.css';\r\nimport '../stylesheets/Button.css';\r\nimport DynamicButton from './DynamicButton';\r\n\r\nclass Room extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.mapRooms = this.mapRooms.bind(this);\r\n        this.state = {\r\n            selected: null,\r\n            roomsHeight : null,\r\n            roomsWidth : null,\r\n            loaded : false,\r\n        }\r\n        this.items = null;\r\n        this.calcRoomDims = this.calcRoomDims.bind(this);;\r\n    }\r\n\r\n    \r\n    //defaults to  \"<usernames>'s Ship\"\r\n    onCreate(){\r\n        this.props.socket.emit(\"CreateRoom\", {name: this.props.player.name, \r\n            roomName: `${this.props.player.name}'s Room`\r\n        });\r\n    }\r\n\r\n    onJoin(e,d,i){\r\n        this.props.socket.emit(\"JoinRoom\", d);\r\n    }\r\n\r\n    //just keep a state of the list of rooms\r\n    onClickRoom(e,name, id){\r\n        this.setState({\r\n            selected : name,\r\n        });\r\n        console.log(this.state.selected);\r\n    }\r\n   \r\n    componentDidMount(){\r\n        this.calcRoomDims();\r\n        window.addEventListener(\"resize\", this.calcRoomDims);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener(\"resize\", this.calcRoomDims);\r\n    }\r\n\r\n    calcRoomDims(){\r\n        const roomDiv = document.getElementById(\"Rooms\");\r\n        const height =  Math.floor(roomDiv.clientHeight*.85) - 20;\r\n        const width = roomDiv.clientWidth - 20;\r\n        this.setState({\r\n                roomsHeight :  height,\r\n                roomsWidth :  width,\r\n                loaded : true,\r\n        });\r\n    }\r\n    \r\n    mapRooms(){\r\n        if(this.state.loaded === false){\r\n           return <div > Loading </div>\r\n        }\r\n        console.log(this.props.roomlist);\r\n        //get size of the div\r\n\r\n        const openRoomsStyle ={\r\n            width: this.state.roomsWidth+\"px\",\r\n            height: this.state.roomsHeight+\"px\",\r\n        }\r\n\r\n        if(Object.entries(this.props.roomlist).length === 0 && Object.constructor){\r\n            return <div className = {\"openRooms\"} style = {openRoomsStyle}> Empty </div>\r\n        \r\n        }\r\n        this.items =  this.props.roomlist.map((d,i)=>{\r\n            let color = false;\r\n            if(this.state.selected === d){\r\n                color = true;\r\n            }\r\n            return <div id ={\"room\"+i} key = {\"room\"+i} \r\n            className = {color? \"activeRoom room\": \"nonActiveRoom room\"} \r\n            onClick={(e)=>this.onClickRoom(e,d,i)} > \r\n            {d.ship}\r\n            <DynamicButton content=\"join\"\r\n                onClick = {(e)=>{this.onJoin(e,d,i)}} \r\n                class = { \"joinButton default_button\"} \r\n                />\r\n            </div>\r\n        })\r\n        //generate style \r\n        return <div className = {\"openRooms\"} style={openRoomsStyle} >\r\n            {this.items}</div>\r\n    }\r\n\r\n    render(){\r\n\r\n        return <div id= \"Rooms\">\r\n                <div id = \"Rooms_Person_Info\">\r\n                    <div id= \"RoomsName\"> {this.props.player.name}</div>\r\n                     <div id = \"RoomListDiv\"> Room lists </div>\r\n                 </div>\r\n                 {this.mapRooms()}\r\n                {/*<button onClick={(e)=>{this.onCreate(e)}} id={\"createButton\"} > Create </button>*/}\r\n                    <DynamicButton\r\n                        content  = \"Create\"\r\n                        ButtonId = \"createButton\"\r\n                        onClick ={(e)=>{this.onCreate(e)}}\r\n                        class= {\"default_button\"}\r\n                        style = {{\r\n\r\n                        }}\r\n\r\n                    />\r\n            </div>\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Room;","import React, {Component} from 'react';\r\nimport DynamicButton from \"./DynamicButton.js\";\r\nimport '../stylesheets/WaitingRoom.css';\r\n\r\nclass WaitingRoom extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            listsize : 0,//size of players in the room\r\n        }\r\n    }\r\n\r\n\r\n    startClick(e){\r\n        this.props.socket.emit(\"start_game\");\r\n    }\r\n\r\n    onDevClick(e){\r\n        this.props.socket.emit(\"dev_gen\");\r\n    }\r\n\r\n    leaveClick(e){\r\n        console.log(\"Tried to leave\");\r\n        this.props.socket.emit(\"getPrePlayerList\");\r\n    }\r\n\r\n\r\n    render(){\r\n        return <div id=\"WaitingRoom\">\r\n                    <div id = \"WaitingRoomTitle\">\r\n                        Waiting on everyone to join\r\n                    </div>\r\n                    <div className={\"waiting_room_players_list\"}>\r\n                        {this.props.waitinglist.map((d, i)=>{\r\n                            return <div className = {\"player_in_waiting_room\"}> {d + \"\\n\"}</div>\r\n                        })}           \r\n                    </div>\r\n                    <div className = {\"waiting_room_button_list\"}>\r\n                        { (this.props.player.isCreator) && \r\n                        <DynamicButton  \r\n                        content = \"Start Game\"\r\n                        onClick = {(e)=>this.startClick(e)}\r\n                        class = \"default_button\"\r\n                        />}\r\n                        \r\n                        <DynamicButton  \r\n                            content = \"Leave Game\"\r\n                            onClick = {(e)=>this.leaveClick(e)}\r\n                            class = \"default_button\"\r\n                            />\r\n                    </div>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default WaitingRoom;","import React, { Component } from \"react\";\r\nimport \"../stylesheets/Container.css\";\r\n//import react components\r\nimport InShip from \"./InShip.js\";\r\n\r\n//import logo from '../imgs/logo.svg';\r\nimport OpenRoomView from \"./OpenRoomView.js\";\r\nimport Rooms from \"./Rooms.js\";\r\nimport WaitingRoom from \"./WaitingRoom.js\";\r\n\r\nclass Container extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: null, // tansfomr to object later ?\r\n      personalMsg: \"\",\r\n      shipMsg: \"\",\r\n      cmdHolder: null,\r\n      stage: \"start_menu\", // start_menu, join_room, waiting_room, game_room\r\n      roomlist: [],\r\n      waitinglist: [],\r\n      navMessage : \"SSI Game\"\r\n    };\r\n\r\n    this.cmdHolder = null; //may not need\r\n    this.gameStage = this.gameStage.bind(this);\r\n  }\r\n\r\n  //make this chronological based on the the stage of creating game\r\n  componentDidMount() {\r\n    this.props.socket.on(\"OnPlayerInit\", e => {\r\n      console.log(e.itter);\r\n      this.setState({\r\n        player: e.player,\r\n        stage: \"join_room\",\r\n        roomlist: e.itter,\r\n        navMessage : \"Open Rooms\" , \r\n      });\r\n    });\r\n\r\n    this.props.socket.on(\"NewRoomAdded\", (e)=>{\r\n      console.log(e);\r\n      this.setState({\r\n        roomlist: e.itter,\r\n      });\r\n    });\r\n\r\n    /**\r\n     * TODO : implement server side\r\n     * on new room being add to the queue\r\n     */\r\n    this.props.socket.on(\"roomList\",(d)=>{\r\n      this.setState({\r\n        roomlist: d.itter,\r\n      })\r\n    });\r\n\r\n    this.props.socket.on(\"OnRoomInit\", e => {\r\n      this.setState({\r\n        stage: \"waiting_room\",\r\n        player: e.player,\r\n        navMessage : \"Waiting Room\" , \r\n      });\r\n    });\r\n\r\n    this.props.socket.on(\"OnGameInit\", d => {\r\n      this.setState({\r\n        player: d.playerState,\r\n        stage: \"game_room\",\r\n        navMessage : \"In Play\" , \r\n      });\r\n\r\n      console.log(d.playerState);\r\n    });\r\n\r\n    this.props.socket.on(\"onShipCmd\", d => {\r\n      this.setState({\r\n        shipMsg: d.msg\r\n      });\r\n    });\r\n\r\n    /**\r\n     * Litsener to update the update the list of user in the waiting room \r\n     */   \r\n    this.props.socket.on(\"prePlayerList\",(d)=>{\r\n      console.log(d);\r\n      this.setState({\r\n        waitinglist : d.list, \r\n      })\r\n    })\r\n\r\n    /*this listener is essentially hidden, \r\n      it just lets the client know that its waiting on the \r\n        correct move to be done.\r\n        */\r\n\r\n    this.props.socket.on(\"onPersonalCMD\", d => {\r\n      this.setState({\r\n        cmdHolder: d\r\n      });\r\n\r\n      this.cmdHolder = d;\r\n      console.log(d);\r\n    });\r\n  }\r\n\r\n  testClick(e) {\r\n    this.props.socket.emit(\"start_game\");\r\n  }\r\n\r\n  onDevClick(e) {\r\n    this.props.socket.emit(\"dev_gen\");\r\n  }\r\n\r\n  /* this function will decide if a button is correct and worth sending\r\n   */\r\n  onClickCMDValidator(e, id) {\r\n    console.log(this.state.cmdHolder);\r\n    if (this.state.cmdHolder == null) return;\r\n    if (id === this.state.cmdHolder.id) {\r\n      this.props.socket.emit(\"Command\", { id: this.id, name: this.name });\r\n    }\r\n  }\r\n\r\n  gameStage() {\r\n    if (this.state.stage === \"start_menu\") {\r\n      return <OpenRoomView socket={this.props.socket} />;\r\n    } else if (this.state.stage === \"join_room\") {\r\n      return (\r\n        <Rooms\r\n          socket={this.props.socket}\r\n          player={this.state.player}\r\n          roomlist={this.state.roomlist}\r\n        />\r\n      );\r\n    } else if (this.state.stage === \"waiting_room\") {\r\n      return (\r\n        <WaitingRoom socket={this.props.socket} player={this.state.player}  waitinglist ={this.state.waitinglist}/>\r\n      );\r\n    } else if (this.state.stage === \"game_room\") {\r\n      return <InShip socket={this.props.socket} player={this.state.player} />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const activeScreen = this.gameStage();\r\n    return <div id=\"Container\">\r\n    <header className=\"App-header\">\r\n          {\r\n            this.state.navMessage\r\n          }\r\n        </header>\r\n    {activeScreen}\r\n    </div>;\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport '../stylesheets/App.css';\r\nimport openSocket from 'socket.io-client';\r\n//import different react components\r\nimport Container from './Container.js';\r\n\r\n//socket.io client\r\nconst socket = openSocket( `localhost:3000`);\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      socket:socket,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    socket.emit(\"initConnection\");\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n       \r\n        <div className=\"App\">\r\n          {<Container socket = {this.state.socket}/>}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}